/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.madhouse.madmax.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ImpressionTrack extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3900636789682066184L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ImpressionTrack\",\"namespace\":\"com.madhouse.madmax.avro\",\"fields\":[{\"name\":\"impid\",\"type\":\"string\"},{\"name\":\"bid\",\"type\":\"string\"},{\"name\":\"sspid\",\"type\":\"long\"},{\"name\":\"mediaid\",\"type\":\"long\"},{\"name\":\"adspaceid\",\"type\":\"long\"},{\"name\":\"projectid\",\"type\":\"long\"},{\"name\":\"cid\",\"type\":\"long\"},{\"name\":\"crid\",\"type\":\"long\"},{\"name\":\"dealid\",\"type\":\"string\"},{\"name\":\"os\",\"type\":\"int\",\"default\":0},{\"name\":\"osv\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"carrier\",\"type\":\"int\",\"default\":0},{\"name\":\"connectiontype\",\"type\":\"int\",\"default\":0},{\"name\":\"income\",\"type\":\"int\"},{\"name\":\"cost\",\"type\":\"int\"},{\"name\":\"ip\",\"type\":\"string\"},{\"name\":\"location\",\"type\":\"string\"},{\"name\":\"deviceid\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"cookieid\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"bidts\",\"type\":\"long\",\"default\":0},{\"name\":\"ts\",\"type\":\"long\"},{\"name\":\"status\",\"type\":\"int\"},{\"name\":\"invalidtype\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ImpressionTrack> ENCODER =
      new BinaryMessageEncoder<ImpressionTrack>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ImpressionTrack> DECODER =
      new BinaryMessageDecoder<ImpressionTrack>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ImpressionTrack> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ImpressionTrack> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ImpressionTrack>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ImpressionTrack to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ImpressionTrack from a ByteBuffer. */
  public static ImpressionTrack fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public CharSequence impid;
  @Deprecated public CharSequence bid;
  @Deprecated public long sspid;
  @Deprecated public long mediaid;
  @Deprecated public long adspaceid;
  @Deprecated public long projectid;
  @Deprecated public long cid;
  @Deprecated public long crid;
  @Deprecated public CharSequence dealid;
  @Deprecated public int os;
  @Deprecated public CharSequence osv;
  @Deprecated public int carrier;
  @Deprecated public int connectiontype;
  @Deprecated public int income;
  @Deprecated public int cost;
  @Deprecated public CharSequence ip;
  @Deprecated public CharSequence location;
  @Deprecated public CharSequence deviceid;
  @Deprecated public CharSequence cookieid;
  @Deprecated public long bidts;
  @Deprecated public long ts;
  @Deprecated public int status;
  @Deprecated public int invalidtype;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ImpressionTrack() {}

  /**
   * All-args constructor.
   * @param impid The new value for impid
   * @param bid The new value for bid
   * @param sspid The new value for sspid
   * @param mediaid The new value for mediaid
   * @param adspaceid The new value for adspaceid
   * @param projectid The new value for projectid
   * @param cid The new value for cid
   * @param crid The new value for crid
   * @param dealid The new value for dealid
   * @param os The new value for os
   * @param osv The new value for osv
   * @param carrier The new value for carrier
   * @param connectiontype The new value for connectiontype
   * @param income The new value for income
   * @param cost The new value for cost
   * @param ip The new value for ip
   * @param location The new value for location
   * @param deviceid The new value for deviceid
   * @param cookieid The new value for cookieid
   * @param bidts The new value for bidts
   * @param ts The new value for ts
   * @param status The new value for status
   * @param invalidtype The new value for invalidtype
   */
  public ImpressionTrack(CharSequence impid, CharSequence bid, Long sspid, Long mediaid, Long adspaceid, Long projectid, Long cid, Long crid, CharSequence dealid, Integer os, CharSequence osv, Integer carrier, Integer connectiontype, Integer income, Integer cost, CharSequence ip, CharSequence location, CharSequence deviceid, CharSequence cookieid, Long bidts, Long ts, Integer status, Integer invalidtype) {
    this.impid = impid;
    this.bid = bid;
    this.sspid = sspid;
    this.mediaid = mediaid;
    this.adspaceid = adspaceid;
    this.projectid = projectid;
    this.cid = cid;
    this.crid = crid;
    this.dealid = dealid;
    this.os = os;
    this.osv = osv;
    this.carrier = carrier;
    this.connectiontype = connectiontype;
    this.income = income;
    this.cost = cost;
    this.ip = ip;
    this.location = location;
    this.deviceid = deviceid;
    this.cookieid = cookieid;
    this.bidts = bidts;
    this.ts = ts;
    this.status = status;
    this.invalidtype = invalidtype;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return impid;
    case 1: return bid;
    case 2: return sspid;
    case 3: return mediaid;
    case 4: return adspaceid;
    case 5: return projectid;
    case 6: return cid;
    case 7: return crid;
    case 8: return dealid;
    case 9: return os;
    case 10: return osv;
    case 11: return carrier;
    case 12: return connectiontype;
    case 13: return income;
    case 14: return cost;
    case 15: return ip;
    case 16: return location;
    case 17: return deviceid;
    case 18: return cookieid;
    case 19: return bidts;
    case 20: return ts;
    case 21: return status;
    case 22: return invalidtype;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: impid = (CharSequence)value$; break;
    case 1: bid = (CharSequence)value$; break;
    case 2: sspid = (Long)value$; break;
    case 3: mediaid = (Long)value$; break;
    case 4: adspaceid = (Long)value$; break;
    case 5: projectid = (Long)value$; break;
    case 6: cid = (Long)value$; break;
    case 7: crid = (Long)value$; break;
    case 8: dealid = (CharSequence)value$; break;
    case 9: os = (Integer)value$; break;
    case 10: osv = (CharSequence)value$; break;
    case 11: carrier = (Integer)value$; break;
    case 12: connectiontype = (Integer)value$; break;
    case 13: income = (Integer)value$; break;
    case 14: cost = (Integer)value$; break;
    case 15: ip = (CharSequence)value$; break;
    case 16: location = (CharSequence)value$; break;
    case 17: deviceid = (CharSequence)value$; break;
    case 18: cookieid = (CharSequence)value$; break;
    case 19: bidts = (Long)value$; break;
    case 20: ts = (Long)value$; break;
    case 21: status = (Integer)value$; break;
    case 22: invalidtype = (Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'impid' field.
   * @return The value of the 'impid' field.
   */
  public CharSequence getImpid() {
    return impid;
  }

  /**
   * Sets the value of the 'impid' field.
   * @param value the value to set.
   */
  public void setImpid(CharSequence value) {
    this.impid = value;
  }

  /**
   * Gets the value of the 'bid' field.
   * @return The value of the 'bid' field.
   */
  public CharSequence getBid() {
    return bid;
  }

  /**
   * Sets the value of the 'bid' field.
   * @param value the value to set.
   */
  public void setBid(CharSequence value) {
    this.bid = value;
  }

  /**
   * Gets the value of the 'sspid' field.
   * @return The value of the 'sspid' field.
   */
  public Long getSspid() {
    return sspid;
  }

  /**
   * Sets the value of the 'sspid' field.
   * @param value the value to set.
   */
  public void setSspid(Long value) {
    this.sspid = value;
  }

  /**
   * Gets the value of the 'mediaid' field.
   * @return The value of the 'mediaid' field.
   */
  public Long getMediaid() {
    return mediaid;
  }

  /**
   * Sets the value of the 'mediaid' field.
   * @param value the value to set.
   */
  public void setMediaid(Long value) {
    this.mediaid = value;
  }

  /**
   * Gets the value of the 'adspaceid' field.
   * @return The value of the 'adspaceid' field.
   */
  public Long getAdspaceid() {
    return adspaceid;
  }

  /**
   * Sets the value of the 'adspaceid' field.
   * @param value the value to set.
   */
  public void setAdspaceid(Long value) {
    this.adspaceid = value;
  }

  /**
   * Gets the value of the 'projectid' field.
   * @return The value of the 'projectid' field.
   */
  public Long getProjectid() {
    return projectid;
  }

  /**
   * Sets the value of the 'projectid' field.
   * @param value the value to set.
   */
  public void setProjectid(Long value) {
    this.projectid = value;
  }

  /**
   * Gets the value of the 'cid' field.
   * @return The value of the 'cid' field.
   */
  public Long getCid() {
    return cid;
  }

  /**
   * Sets the value of the 'cid' field.
   * @param value the value to set.
   */
  public void setCid(Long value) {
    this.cid = value;
  }

  /**
   * Gets the value of the 'crid' field.
   * @return The value of the 'crid' field.
   */
  public Long getCrid() {
    return crid;
  }

  /**
   * Sets the value of the 'crid' field.
   * @param value the value to set.
   */
  public void setCrid(Long value) {
    this.crid = value;
  }

  /**
   * Gets the value of the 'dealid' field.
   * @return The value of the 'dealid' field.
   */
  public CharSequence getDealid() {
    return dealid;
  }

  /**
   * Sets the value of the 'dealid' field.
   * @param value the value to set.
   */
  public void setDealid(CharSequence value) {
    this.dealid = value;
  }

  /**
   * Gets the value of the 'os' field.
   * @return The value of the 'os' field.
   */
  public Integer getOs() {
    return os;
  }

  /**
   * Sets the value of the 'os' field.
   * @param value the value to set.
   */
  public void setOs(Integer value) {
    this.os = value;
  }

  /**
   * Gets the value of the 'osv' field.
   * @return The value of the 'osv' field.
   */
  public CharSequence getOsv() {
    return osv;
  }

  /**
   * Sets the value of the 'osv' field.
   * @param value the value to set.
   */
  public void setOsv(CharSequence value) {
    this.osv = value;
  }

  /**
   * Gets the value of the 'carrier' field.
   * @return The value of the 'carrier' field.
   */
  public Integer getCarrier() {
    return carrier;
  }

  /**
   * Sets the value of the 'carrier' field.
   * @param value the value to set.
   */
  public void setCarrier(Integer value) {
    this.carrier = value;
  }

  /**
   * Gets the value of the 'connectiontype' field.
   * @return The value of the 'connectiontype' field.
   */
  public Integer getConnectiontype() {
    return connectiontype;
  }

  /**
   * Sets the value of the 'connectiontype' field.
   * @param value the value to set.
   */
  public void setConnectiontype(Integer value) {
    this.connectiontype = value;
  }

  /**
   * Gets the value of the 'income' field.
   * @return The value of the 'income' field.
   */
  public Integer getIncome() {
    return income;
  }

  /**
   * Sets the value of the 'income' field.
   * @param value the value to set.
   */
  public void setIncome(Integer value) {
    this.income = value;
  }

  /**
   * Gets the value of the 'cost' field.
   * @return The value of the 'cost' field.
   */
  public Integer getCost() {
    return cost;
  }

  /**
   * Sets the value of the 'cost' field.
   * @param value the value to set.
   */
  public void setCost(Integer value) {
    this.cost = value;
  }

  /**
   * Gets the value of the 'ip' field.
   * @return The value of the 'ip' field.
   */
  public CharSequence getIp() {
    return ip;
  }

  /**
   * Sets the value of the 'ip' field.
   * @param value the value to set.
   */
  public void setIp(CharSequence value) {
    this.ip = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return The value of the 'location' field.
   */
  public CharSequence getLocation() {
    return location;
  }

  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(CharSequence value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'deviceid' field.
   * @return The value of the 'deviceid' field.
   */
  public CharSequence getDeviceid() {
    return deviceid;
  }

  /**
   * Sets the value of the 'deviceid' field.
   * @param value the value to set.
   */
  public void setDeviceid(CharSequence value) {
    this.deviceid = value;
  }

  /**
   * Gets the value of the 'cookieid' field.
   * @return The value of the 'cookieid' field.
   */
  public CharSequence getCookieid() {
    return cookieid;
  }

  /**
   * Sets the value of the 'cookieid' field.
   * @param value the value to set.
   */
  public void setCookieid(CharSequence value) {
    this.cookieid = value;
  }

  /**
   * Gets the value of the 'bidts' field.
   * @return The value of the 'bidts' field.
   */
  public Long getBidts() {
    return bidts;
  }

  /**
   * Sets the value of the 'bidts' field.
   * @param value the value to set.
   */
  public void setBidts(Long value) {
    this.bidts = value;
  }

  /**
   * Gets the value of the 'ts' field.
   * @return The value of the 'ts' field.
   */
  public Long getTs() {
    return ts;
  }

  /**
   * Sets the value of the 'ts' field.
   * @param value the value to set.
   */
  public void setTs(Long value) {
    this.ts = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public Integer getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(Integer value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'invalidtype' field.
   * @return The value of the 'invalidtype' field.
   */
  public Integer getInvalidtype() {
    return invalidtype;
  }

  /**
   * Sets the value of the 'invalidtype' field.
   * @param value the value to set.
   */
  public void setInvalidtype(Integer value) {
    this.invalidtype = value;
  }

  /**
   * Creates a new ImpressionTrack RecordBuilder.
   * @return A new ImpressionTrack RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new ImpressionTrack RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ImpressionTrack RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new ImpressionTrack RecordBuilder by copying an existing ImpressionTrack instance.
   * @param other The existing instance to copy.
   * @return A new ImpressionTrack RecordBuilder
   */
  public static Builder newBuilder(ImpressionTrack other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for ImpressionTrack instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ImpressionTrack>
    implements org.apache.avro.data.RecordBuilder<ImpressionTrack> {

    private CharSequence impid;
    private CharSequence bid;
    private long sspid;
    private long mediaid;
    private long adspaceid;
    private long projectid;
    private long cid;
    private long crid;
    private CharSequence dealid;
    private int os;
    private CharSequence osv;
    private int carrier;
    private int connectiontype;
    private int income;
    private int cost;
    private CharSequence ip;
    private CharSequence location;
    private CharSequence deviceid;
    private CharSequence cookieid;
    private long bidts;
    private long ts;
    private int status;
    private int invalidtype;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.impid)) {
        this.impid = data().deepCopy(fields()[0].schema(), other.impid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bid)) {
        this.bid = data().deepCopy(fields()[1].schema(), other.bid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sspid)) {
        this.sspid = data().deepCopy(fields()[2].schema(), other.sspid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mediaid)) {
        this.mediaid = data().deepCopy(fields()[3].schema(), other.mediaid);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.adspaceid)) {
        this.adspaceid = data().deepCopy(fields()[4].schema(), other.adspaceid);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.projectid)) {
        this.projectid = data().deepCopy(fields()[5].schema(), other.projectid);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.cid)) {
        this.cid = data().deepCopy(fields()[6].schema(), other.cid);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.crid)) {
        this.crid = data().deepCopy(fields()[7].schema(), other.crid);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.dealid)) {
        this.dealid = data().deepCopy(fields()[8].schema(), other.dealid);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.os)) {
        this.os = data().deepCopy(fields()[9].schema(), other.os);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.osv)) {
        this.osv = data().deepCopy(fields()[10].schema(), other.osv);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.carrier)) {
        this.carrier = data().deepCopy(fields()[11].schema(), other.carrier);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.connectiontype)) {
        this.connectiontype = data().deepCopy(fields()[12].schema(), other.connectiontype);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.income)) {
        this.income = data().deepCopy(fields()[13].schema(), other.income);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.cost)) {
        this.cost = data().deepCopy(fields()[14].schema(), other.cost);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.ip)) {
        this.ip = data().deepCopy(fields()[15].schema(), other.ip);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.location)) {
        this.location = data().deepCopy(fields()[16].schema(), other.location);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.deviceid)) {
        this.deviceid = data().deepCopy(fields()[17].schema(), other.deviceid);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.cookieid)) {
        this.cookieid = data().deepCopy(fields()[18].schema(), other.cookieid);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.bidts)) {
        this.bidts = data().deepCopy(fields()[19].schema(), other.bidts);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.ts)) {
        this.ts = data().deepCopy(fields()[20].schema(), other.ts);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.status)) {
        this.status = data().deepCopy(fields()[21].schema(), other.status);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.invalidtype)) {
        this.invalidtype = data().deepCopy(fields()[22].schema(), other.invalidtype);
        fieldSetFlags()[22] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ImpressionTrack instance
     * @param other The existing instance to copy.
     */
    private Builder(ImpressionTrack other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.impid)) {
        this.impid = data().deepCopy(fields()[0].schema(), other.impid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bid)) {
        this.bid = data().deepCopy(fields()[1].schema(), other.bid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sspid)) {
        this.sspid = data().deepCopy(fields()[2].schema(), other.sspid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mediaid)) {
        this.mediaid = data().deepCopy(fields()[3].schema(), other.mediaid);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.adspaceid)) {
        this.adspaceid = data().deepCopy(fields()[4].schema(), other.adspaceid);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.projectid)) {
        this.projectid = data().deepCopy(fields()[5].schema(), other.projectid);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.cid)) {
        this.cid = data().deepCopy(fields()[6].schema(), other.cid);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.crid)) {
        this.crid = data().deepCopy(fields()[7].schema(), other.crid);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.dealid)) {
        this.dealid = data().deepCopy(fields()[8].schema(), other.dealid);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.os)) {
        this.os = data().deepCopy(fields()[9].schema(), other.os);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.osv)) {
        this.osv = data().deepCopy(fields()[10].schema(), other.osv);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.carrier)) {
        this.carrier = data().deepCopy(fields()[11].schema(), other.carrier);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.connectiontype)) {
        this.connectiontype = data().deepCopy(fields()[12].schema(), other.connectiontype);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.income)) {
        this.income = data().deepCopy(fields()[13].schema(), other.income);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.cost)) {
        this.cost = data().deepCopy(fields()[14].schema(), other.cost);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.ip)) {
        this.ip = data().deepCopy(fields()[15].schema(), other.ip);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.location)) {
        this.location = data().deepCopy(fields()[16].schema(), other.location);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.deviceid)) {
        this.deviceid = data().deepCopy(fields()[17].schema(), other.deviceid);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.cookieid)) {
        this.cookieid = data().deepCopy(fields()[18].schema(), other.cookieid);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.bidts)) {
        this.bidts = data().deepCopy(fields()[19].schema(), other.bidts);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.ts)) {
        this.ts = data().deepCopy(fields()[20].schema(), other.ts);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.status)) {
        this.status = data().deepCopy(fields()[21].schema(), other.status);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.invalidtype)) {
        this.invalidtype = data().deepCopy(fields()[22].schema(), other.invalidtype);
        fieldSetFlags()[22] = true;
      }
    }

    /**
      * Gets the value of the 'impid' field.
      * @return The value.
      */
    public CharSequence getImpid() {
      return impid;
    }

    /**
      * Sets the value of the 'impid' field.
      * @param value The value of 'impid'.
      * @return This builder.
      */
    public Builder setImpid(CharSequence value) {
      validate(fields()[0], value);
      this.impid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'impid' field has been set.
      * @return True if the 'impid' field has been set, false otherwise.
      */
    public boolean hasImpid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'impid' field.
      * @return This builder.
      */
    public Builder clearImpid() {
      impid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bid' field.
      * @return The value.
      */
    public CharSequence getBid() {
      return bid;
    }

    /**
      * Sets the value of the 'bid' field.
      * @param value The value of 'bid'.
      * @return This builder.
      */
    public Builder setBid(CharSequence value) {
      validate(fields()[1], value);
      this.bid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bid' field has been set.
      * @return True if the 'bid' field has been set, false otherwise.
      */
    public boolean hasBid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bid' field.
      * @return This builder.
      */
    public Builder clearBid() {
      bid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sspid' field.
      * @return The value.
      */
    public Long getSspid() {
      return sspid;
    }

    /**
      * Sets the value of the 'sspid' field.
      * @param value The value of 'sspid'.
      * @return This builder.
      */
    public Builder setSspid(long value) {
      validate(fields()[2], value);
      this.sspid = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sspid' field has been set.
      * @return True if the 'sspid' field has been set, false otherwise.
      */
    public boolean hasSspid() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sspid' field.
      * @return This builder.
      */
    public Builder clearSspid() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaid' field.
      * @return The value.
      */
    public Long getMediaid() {
      return mediaid;
    }

    /**
      * Sets the value of the 'mediaid' field.
      * @param value The value of 'mediaid'.
      * @return This builder.
      */
    public Builder setMediaid(long value) {
      validate(fields()[3], value);
      this.mediaid = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaid' field has been set.
      * @return True if the 'mediaid' field has been set, false otherwise.
      */
    public boolean hasMediaid() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'mediaid' field.
      * @return This builder.
      */
    public Builder clearMediaid() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'adspaceid' field.
      * @return The value.
      */
    public Long getAdspaceid() {
      return adspaceid;
    }

    /**
      * Sets the value of the 'adspaceid' field.
      * @param value The value of 'adspaceid'.
      * @return This builder.
      */
    public Builder setAdspaceid(long value) {
      validate(fields()[4], value);
      this.adspaceid = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'adspaceid' field has been set.
      * @return True if the 'adspaceid' field has been set, false otherwise.
      */
    public boolean hasAdspaceid() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'adspaceid' field.
      * @return This builder.
      */
    public Builder clearAdspaceid() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'projectid' field.
      * @return The value.
      */
    public Long getProjectid() {
      return projectid;
    }

    /**
      * Sets the value of the 'projectid' field.
      * @param value The value of 'projectid'.
      * @return This builder.
      */
    public Builder setProjectid(long value) {
      validate(fields()[5], value);
      this.projectid = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'projectid' field has been set.
      * @return True if the 'projectid' field has been set, false otherwise.
      */
    public boolean hasProjectid() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'projectid' field.
      * @return This builder.
      */
    public Builder clearProjectid() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'cid' field.
      * @return The value.
      */
    public Long getCid() {
      return cid;
    }

    /**
      * Sets the value of the 'cid' field.
      * @param value The value of 'cid'.
      * @return This builder.
      */
    public Builder setCid(long value) {
      validate(fields()[6], value);
      this.cid = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'cid' field has been set.
      * @return True if the 'cid' field has been set, false otherwise.
      */
    public boolean hasCid() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'cid' field.
      * @return This builder.
      */
    public Builder clearCid() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'crid' field.
      * @return The value.
      */
    public Long getCrid() {
      return crid;
    }

    /**
      * Sets the value of the 'crid' field.
      * @param value The value of 'crid'.
      * @return This builder.
      */
    public Builder setCrid(long value) {
      validate(fields()[7], value);
      this.crid = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'crid' field has been set.
      * @return True if the 'crid' field has been set, false otherwise.
      */
    public boolean hasCrid() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'crid' field.
      * @return This builder.
      */
    public Builder clearCrid() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'dealid' field.
      * @return The value.
      */
    public CharSequence getDealid() {
      return dealid;
    }

    /**
      * Sets the value of the 'dealid' field.
      * @param value The value of 'dealid'.
      * @return This builder.
      */
    public Builder setDealid(CharSequence value) {
      validate(fields()[8], value);
      this.dealid = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'dealid' field has been set.
      * @return True if the 'dealid' field has been set, false otherwise.
      */
    public boolean hasDealid() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'dealid' field.
      * @return This builder.
      */
    public Builder clearDealid() {
      dealid = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'os' field.
      * @return The value.
      */
    public Integer getOs() {
      return os;
    }

    /**
      * Sets the value of the 'os' field.
      * @param value The value of 'os'.
      * @return This builder.
      */
    public Builder setOs(int value) {
      validate(fields()[9], value);
      this.os = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'os' field has been set.
      * @return True if the 'os' field has been set, false otherwise.
      */
    public boolean hasOs() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'os' field.
      * @return This builder.
      */
    public Builder clearOs() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'osv' field.
      * @return The value.
      */
    public CharSequence getOsv() {
      return osv;
    }

    /**
      * Sets the value of the 'osv' field.
      * @param value The value of 'osv'.
      * @return This builder.
      */
    public Builder setOsv(CharSequence value) {
      validate(fields()[10], value);
      this.osv = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'osv' field has been set.
      * @return True if the 'osv' field has been set, false otherwise.
      */
    public boolean hasOsv() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'osv' field.
      * @return This builder.
      */
    public Builder clearOsv() {
      osv = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'carrier' field.
      * @return The value.
      */
    public Integer getCarrier() {
      return carrier;
    }

    /**
      * Sets the value of the 'carrier' field.
      * @param value The value of 'carrier'.
      * @return This builder.
      */
    public Builder setCarrier(int value) {
      validate(fields()[11], value);
      this.carrier = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'carrier' field has been set.
      * @return True if the 'carrier' field has been set, false otherwise.
      */
    public boolean hasCarrier() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'carrier' field.
      * @return This builder.
      */
    public Builder clearCarrier() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'connectiontype' field.
      * @return The value.
      */
    public Integer getConnectiontype() {
      return connectiontype;
    }

    /**
      * Sets the value of the 'connectiontype' field.
      * @param value The value of 'connectiontype'.
      * @return This builder.
      */
    public Builder setConnectiontype(int value) {
      validate(fields()[12], value);
      this.connectiontype = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'connectiontype' field has been set.
      * @return True if the 'connectiontype' field has been set, false otherwise.
      */
    public boolean hasConnectiontype() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'connectiontype' field.
      * @return This builder.
      */
    public Builder clearConnectiontype() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'income' field.
      * @return The value.
      */
    public Integer getIncome() {
      return income;
    }

    /**
      * Sets the value of the 'income' field.
      * @param value The value of 'income'.
      * @return This builder.
      */
    public Builder setIncome(int value) {
      validate(fields()[13], value);
      this.income = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'income' field has been set.
      * @return True if the 'income' field has been set, false otherwise.
      */
    public boolean hasIncome() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'income' field.
      * @return This builder.
      */
    public Builder clearIncome() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'cost' field.
      * @return The value.
      */
    public Integer getCost() {
      return cost;
    }

    /**
      * Sets the value of the 'cost' field.
      * @param value The value of 'cost'.
      * @return This builder.
      */
    public Builder setCost(int value) {
      validate(fields()[14], value);
      this.cost = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'cost' field has been set.
      * @return True if the 'cost' field has been set, false otherwise.
      */
    public boolean hasCost() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'cost' field.
      * @return This builder.
      */
    public Builder clearCost() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'ip' field.
      * @return The value.
      */
    public CharSequence getIp() {
      return ip;
    }

    /**
      * Sets the value of the 'ip' field.
      * @param value The value of 'ip'.
      * @return This builder.
      */
    public Builder setIp(CharSequence value) {
      validate(fields()[15], value);
      this.ip = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'ip' field has been set.
      * @return True if the 'ip' field has been set, false otherwise.
      */
    public boolean hasIp() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'ip' field.
      * @return This builder.
      */
    public Builder clearIp() {
      ip = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * @return The value.
      */
    public CharSequence getLocation() {
      return location;
    }

    /**
      * Sets the value of the 'location' field.
      * @param value The value of 'location'.
      * @return This builder.
      */
    public Builder setLocation(CharSequence value) {
      validate(fields()[16], value);
      this.location = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'location' field.
      * @return This builder.
      */
    public Builder clearLocation() {
      location = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'deviceid' field.
      * @return The value.
      */
    public CharSequence getDeviceid() {
      return deviceid;
    }

    /**
      * Sets the value of the 'deviceid' field.
      * @param value The value of 'deviceid'.
      * @return This builder.
      */
    public Builder setDeviceid(CharSequence value) {
      validate(fields()[17], value);
      this.deviceid = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'deviceid' field has been set.
      * @return True if the 'deviceid' field has been set, false otherwise.
      */
    public boolean hasDeviceid() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'deviceid' field.
      * @return This builder.
      */
    public Builder clearDeviceid() {
      deviceid = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'cookieid' field.
      * @return The value.
      */
    public CharSequence getCookieid() {
      return cookieid;
    }

    /**
      * Sets the value of the 'cookieid' field.
      * @param value The value of 'cookieid'.
      * @return This builder.
      */
    public Builder setCookieid(CharSequence value) {
      validate(fields()[18], value);
      this.cookieid = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'cookieid' field has been set.
      * @return True if the 'cookieid' field has been set, false otherwise.
      */
    public boolean hasCookieid() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'cookieid' field.
      * @return This builder.
      */
    public Builder clearCookieid() {
      cookieid = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'bidts' field.
      * @return The value.
      */
    public Long getBidts() {
      return bidts;
    }

    /**
      * Sets the value of the 'bidts' field.
      * @param value The value of 'bidts'.
      * @return This builder.
      */
    public Builder setBidts(long value) {
      validate(fields()[19], value);
      this.bidts = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'bidts' field has been set.
      * @return True if the 'bidts' field has been set, false otherwise.
      */
    public boolean hasBidts() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'bidts' field.
      * @return This builder.
      */
    public Builder clearBidts() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'ts' field.
      * @return The value.
      */
    public Long getTs() {
      return ts;
    }

    /**
      * Sets the value of the 'ts' field.
      * @param value The value of 'ts'.
      * @return This builder.
      */
    public Builder setTs(long value) {
      validate(fields()[20], value);
      this.ts = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'ts' field has been set.
      * @return True if the 'ts' field has been set, false otherwise.
      */
    public boolean hasTs() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'ts' field.
      * @return This builder.
      */
    public Builder clearTs() {
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public Integer getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public Builder setStatus(int value) {
      validate(fields()[21], value);
      this.status = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public Builder clearStatus() {
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'invalidtype' field.
      * @return The value.
      */
    public Integer getInvalidtype() {
      return invalidtype;
    }

    /**
      * Sets the value of the 'invalidtype' field.
      * @param value The value of 'invalidtype'.
      * @return This builder.
      */
    public Builder setInvalidtype(int value) {
      validate(fields()[22], value);
      this.invalidtype = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'invalidtype' field has been set.
      * @return True if the 'invalidtype' field has been set, false otherwise.
      */
    public boolean hasInvalidtype() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'invalidtype' field.
      * @return This builder.
      */
    public Builder clearInvalidtype() {
      fieldSetFlags()[22] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ImpressionTrack build() {
      try {
        ImpressionTrack record = new ImpressionTrack();
        record.impid = fieldSetFlags()[0] ? this.impid : (CharSequence) defaultValue(fields()[0]);
        record.bid = fieldSetFlags()[1] ? this.bid : (CharSequence) defaultValue(fields()[1]);
        record.sspid = fieldSetFlags()[2] ? this.sspid : (Long) defaultValue(fields()[2]);
        record.mediaid = fieldSetFlags()[3] ? this.mediaid : (Long) defaultValue(fields()[3]);
        record.adspaceid = fieldSetFlags()[4] ? this.adspaceid : (Long) defaultValue(fields()[4]);
        record.projectid = fieldSetFlags()[5] ? this.projectid : (Long) defaultValue(fields()[5]);
        record.cid = fieldSetFlags()[6] ? this.cid : (Long) defaultValue(fields()[6]);
        record.crid = fieldSetFlags()[7] ? this.crid : (Long) defaultValue(fields()[7]);
        record.dealid = fieldSetFlags()[8] ? this.dealid : (CharSequence) defaultValue(fields()[8]);
        record.os = fieldSetFlags()[9] ? this.os : (Integer) defaultValue(fields()[9]);
        record.osv = fieldSetFlags()[10] ? this.osv : (CharSequence) defaultValue(fields()[10]);
        record.carrier = fieldSetFlags()[11] ? this.carrier : (Integer) defaultValue(fields()[11]);
        record.connectiontype = fieldSetFlags()[12] ? this.connectiontype : (Integer) defaultValue(fields()[12]);
        record.income = fieldSetFlags()[13] ? this.income : (Integer) defaultValue(fields()[13]);
        record.cost = fieldSetFlags()[14] ? this.cost : (Integer) defaultValue(fields()[14]);
        record.ip = fieldSetFlags()[15] ? this.ip : (CharSequence) defaultValue(fields()[15]);
        record.location = fieldSetFlags()[16] ? this.location : (CharSequence) defaultValue(fields()[16]);
        record.deviceid = fieldSetFlags()[17] ? this.deviceid : (CharSequence) defaultValue(fields()[17]);
        record.cookieid = fieldSetFlags()[18] ? this.cookieid : (CharSequence) defaultValue(fields()[18]);
        record.bidts = fieldSetFlags()[19] ? this.bidts : (Long) defaultValue(fields()[19]);
        record.ts = fieldSetFlags()[20] ? this.ts : (Long) defaultValue(fields()[20]);
        record.status = fieldSetFlags()[21] ? this.status : (Integer) defaultValue(fields()[21]);
        record.invalidtype = fieldSetFlags()[22] ? this.invalidtype : (Integer) defaultValue(fields()[22]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ImpressionTrack>
    WRITER$ = (org.apache.avro.io.DatumWriter<ImpressionTrack>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ImpressionTrack>
    READER$ = (org.apache.avro.io.DatumReader<ImpressionTrack>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
